<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.2.1">Jekyll</generator><link href="http://icicimov.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="http://icicimov.github.io/" rel="alternate" type="text/html" /><updated>2016-10-01T23:49:04+10:00</updated><id>http://icicimov.github.io/</id><title>Igor Cicimov</title><subtitle>DevOps at Encompass</subtitle><entry><title>Tomcat9, ECDSA/ECC (Elliptic Curve) Certificates and HTTP/2</title><link href="http://icicimov.github.io/Tomcat9-ECDSA-Certificates-and-HTTP2/" rel="alternate" type="text/html" title="Tomcat9, ECDSA/ECC (Elliptic Curve) Certificates and HTTP/2" /><published>2016-04-04T00:00:00+10:00</published><updated>2016-04-04T00:00:00+10:00</updated><id>http://icicimov.github.io/Tomcat9-ECDSA-Certificates-and-HTTP2</id><content type="html" xml:base="http://icicimov.github.io/Tomcat9-ECDSA-Certificates-and-HTTP2/">&lt;p&gt;Tomcat9 brings bunch of new features of which support for HTTP/2 and multiple certificates per Virtual Host via SNI extension are most important ones. This needs Java 1.8, the latest APR/TC (Tomcat Native) release 1.2.x, since SNI support in current Java 1.8 is useless, which in turn requires OpenSSL version 1.0.2g installed. Early users of HTTP/2, according to one of the main Tomcat developers Mark Thomas, reported improvement of up to 20% in page speed due to its benefits like multiplexing, header compression and server push (servlet 4.0 API needed). By default HTTP/2 (h2) protocol is SSL, as expected the whole internet to be over https only in near future, but there is a clear-text version as well called h2c.&lt;/p&gt;

&lt;p&gt;The ECDSA certificates are smaller, meaning faster processing time on the server and less CPU usage which in term means less latency and more security. It&amp;#39;s in the early day of adoption by the clients though so for some time we will need to support both certificate types, ECDSA and RSA.&lt;/p&gt;

&lt;p&gt;Nice things to have so I setup a test Tomcat9 server on Ubunut 14.04.&lt;/p&gt;

&lt;h2&gt;Setup&lt;/h2&gt;

&lt;p&gt;We start by installing and setup of the prerequisites mentioned in the Introduction.&lt;/p&gt;

&lt;h3&gt;OpenSSL&lt;/h3&gt;

&lt;p&gt;Standard compile procedure, we start by installing some needed packages:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;igorc@sl01:/opt$ sudo aptitude install zlib1g-dev zlibc libcrypto++-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and then downloading and extracting the source:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;igorc@sl01:/opt$ sudo wget http://www.openssl.org/source/openssl-1.0.2g.tar.gz
igorc@sl01:/opt$ sudo tar -xzf openssl-1.0.2g.tar.gz
igorc@sl01:/opt$ sudo chown -R igorc\: openssl-1.0.2g
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next we change to the source directory and create the openssl.ld file:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;igorc@sl01:/opt$ cd openssl-1.0.2g/
igorc@sl01:~/openssl-1.0.2g$ vi openssl.ld
OPENSSL_1.0.0 {
    global:
    *;
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and finally compile and install the software:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;igorc@sl01:/opt/openssl-1.0.2g$ ./config --prefix=/opt/openssl zlib-dynamic shared -Wl,--version-script=/home/igorc/openssl-1.0.2g/openssl.ld -Wl,-Bsymbolic-functions
igorc@sl01:/opt/openssl-1.0.2g$ make depend
igorc@sl01:/opt/openssl-1.0.2g$ make all
igorc@sl01:/opt/openssl-1.0.2g$ sudo make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will set OpenSSL 1.0.2g under /opt/openssl directory:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;igorc@sl01:/opt/openssl-1.0.2g$ ls -l /opt/openssl
total 16
drwxr-xr-x 2 root root 4096 Apr  2 19:18 bin
drwxr-xr-x 3 root root 4096 Apr  2 19:18 include
drwxr-xr-x 4 root root 4096 Apr  2 19:18 lib
drwxr-xr-x 6 root root 4096 Apr  2 19:18 ssl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Java8&lt;/h3&gt;

&lt;p&gt;One liner installation:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;igorc@sl01:/opt$ sudo echo oracle-java8-installer shared/accepted-oracle-license-v1-1 select true | sudo /usr/bin/debconf-set-selections &amp;amp;&amp;amp; echo &amp;quot;deb http://ppa.launchpad.net/webupd8team/java/ubuntu trusty main&amp;quot; | sudo tee -a /etc/apt/sources.list &amp;amp;&amp;amp; echo &amp;quot;deb-src http://ppa.launchpad.net/webupd8team/java/ubuntu trusty main&amp;quot; | sudo tee -a /etc/apt/sources.list &amp;amp;&amp;amp; sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys EEA14886 &amp;amp;&amp;amp; sudo aptitude update &amp;amp;&amp;amp; sudo aptitude install -y oracle-java8-installer &amp;amp;&amp;amp; sudo aptitude install -y oracle-java8-set-default
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will add the needed Ubuntu ppa, install the latest Oracle 1.8 JDK and set it as default Java environment.&lt;/p&gt;

&lt;h3&gt;Tomcat9&lt;/h3&gt;

&lt;h4&gt;Installation&lt;/h4&gt;

&lt;p&gt;Get and unpack the latest Tomcat9 release, alfa version v9.0.0.M4 at the moment of this writing, and setup tomcat user:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;igorc@sl01:/opt$ sudo groupadd -r -g 501 tomcat9
igorc@sl01:/opt$ sudo useradd -r -c &amp;quot;Tomcat9 user&amp;quot; -s /bin/false -M -d /usr/share/tomcat9 -g 501 -u 501 -G www-data tomcat9
igorc@sl01:/opt$ sudo wget http://apache.uberglobalmirror.com/tomcat/tomcat-9/v9.0.0.M4/bin/apache-tomcat-9.0.0.M4.tar.gz
igorc@sl01:/opt$ sudo tar -xzf apache-tomcat-9.0.0.M4.tar.gz
igorc@sl01:/opt$ sudo mv apache-tomcat-9.0.0.M4 /usr/share/tomcat9
igorc@sl01:/opt$ sudo ln -sf /usr/share/tomcat9/logs /var/log/tomcat9
igorc@sl01:/opt$ sudo ln -sf /usr/share/tomcat9/work /var/cache/tomcat9
igorc@sl01:/opt$ sudo ln -sf /usr/share/tomcat9/conf /etc/tomcat9
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;TC-Native&lt;/h4&gt;

&lt;p&gt;We install the needed packages first:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;igorc@sl01:/opt$ sudo aptitude install libapr1-dev libssl-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and then we download and etract the tcnative source, xtract and build it against oopenssl-1.0.2g we installed previously:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;igorc@sl01:/opt$ sudo wget http://apache.mirror.digitalpacific.com.au/tomcat/tomcat-connectors/native/1.2.5/source/tomcat-native-1.2.5-src.tar.gz
igorc@sl01:/opt$ sudo tar -xzf tomcat-native-1.2.5-src.tar.gz
igorc@sl01:/opt$ cd tomcat-native-1.2.5-src/native
igorc@sl01:/opt/tomcat-native-1.2.5-src/native$ ./configure --prefix=/usr --libdir=/usr/lib --with-apr=/usr/bin/apr-1-config --with-java-home=/usr/lib/jvm/java-8-oracle --with-ssl=/opt/openssl
igorc@sl01:/opt/tomcat-native-1.2.5-src/native$ make
igorc@sl01:/opt/tomcat-native-1.2.5-src/native$ sudo make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We check that tcnative is properly linked to the right openssl version (in case you have more than one installed):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;igorc@sl01:/opt/tomcat-native-1.2.5-src/native$ ldd /usr/lib/libtcnative-1.so.0.2.5
linux-vdso.so.1 =&amp;gt;  (0x00007ffcd2ba5000)
libssl.so.1.0.0 =&amp;gt; /opt/openssl/lib/libssl.so.1.0.0 (0x00007f67d06a1000)
libcrypto.so.1.0.0 =&amp;gt; /opt/openssl/lib/libcrypto.so.1.0.0 (0x00007f67d0251000)
libapr-1.so.0 =&amp;gt; /usr/lib/x86_64-linux-gnu/libapr-1.so.0 (0x00007f67d0020000)
libpthread.so.0 =&amp;gt; /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f67cfe02000)
libc.so.6 =&amp;gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f67cfa3d000)
libdl.so.2 =&amp;gt; /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f67cf839000)
libz.so.1 =&amp;gt; /lib/x86_64-linux-gnu/libz.so.1 (0x00007f67cf620000)
libuuid.so.1 =&amp;gt; /lib/x86_64-linux-gnu/libuuid.so.1 (0x00007f67cf41b000)
/lib64/ld-linux-x86-64.so.2 (0x00007f67d0b3e000)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Config and SSL setup&lt;/h4&gt;

&lt;p&gt;I wanted to test the ECDSA certificate type and multi-certificate support in tomcat9. First create ECC cert and install it so tomcat can find it:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;igorc@sl01:~$ openssl req -new -x509 -nodes -newkey ec:&amp;lt;(openssl ecparam -name secp384r1) -keyout cert_ecdsa.key -out cert_ecdsa.crt -days 7200 -subj &amp;#39;/C=AU/ST=New South Wales/L=Sydney/O=My Corporation Ltd./OU=DevOps/CN=tomcat9.mydomain.com&amp;#39;
igorc@sl01:~$ sudo mkdir /etc/tomcat9/ssl
igorc@sl01:~$ sudo cp cert_ecdsa.key cert_ecdsa.crt /etc/tomcat9/ssl/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then created a standard RSA one too:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;igorc@sl01:~$ openssl genrsa -des3 -passout pass:x -out server.pass.key 2048
igorc@sl01:~$ openssl rsa -passin pass:x -in server.pass.key -out server.key
igorc@sl01:~$ rm server.pass.key
igorc@sl01:~$ openssl req -new -key server.key -out server.csr -subj &amp;#39;/C=AU/ST=New South Wales/L=Sydney/O=My Corporation Ltd./OU=DevOps/CN=tomcat9.mydomain.com&amp;#39;
igorc@sl01:~$ openssl x509 -req -days 7200 -in server.csr -signkey server.key -out server.crt
Signature ok
subject=/C=AU/ST=New South Wales/L=Sydney/O=My Corporation Ltd./OU=DevOps/CN=tomcat9.mydomain.com
Getting Private key
igorc@sl01:~$ sudo cp server.key server.crt /etc/tomcat9/ssl/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we can configure tomcat9&amp;#39;s SSL/TLS connector with HTTP/2 support. Replace the default &lt;code&gt;&amp;lt;Connector&amp;gt;&lt;/code&gt; section in the tomcat&amp;#39;s server.xml file, in our case &lt;code&gt;/etc/tomcat9/server.xml&lt;/code&gt;, with the one below:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;    &amp;lt;Connector port=&amp;quot;8443&amp;quot; protocol=&amp;quot;org.apache.coyote.http11.Http11AprProtocol&amp;quot;
               maxThreads=&amp;quot;150&amp;quot; SSLEnabled=&amp;quot;true&amp;quot; scheme=&amp;quot;https&amp;quot; secure=&amp;quot;true&amp;quot; &amp;gt;
        &amp;lt;UpgradeProtocol className=&amp;quot;org.apache.coyote.http2.Http2Protocol&amp;quot; /&amp;gt;
        &amp;lt;SSLHostConfig honorCipherOrder=&amp;quot;true&amp;quot; disableCompression=&amp;quot;true&amp;quot; protocols=&amp;quot;all&amp;quot;
                       ciphers=&amp;quot;EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384
                       EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4
                       EECDH EDH+aRSA RC4 !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS !RC4&amp;quot; &amp;gt;
            &amp;lt;Certificate certificateKeyFile=&amp;quot;conf/ssl/cert_ecdsa.key&amp;quot;
                         certificateFile=&amp;quot;conf/ssl/cert_ecdsa.crt&amp;quot;
                         type=&amp;quot;EC&amp;quot; /&amp;gt;
            &amp;lt;Certificate certificateKeyFile=&amp;quot;conf/ssl/server.key&amp;quot;
                         certificateFile=&amp;quot;conf/ssl/server.crt&amp;quot;
                         type=&amp;quot;RSA&amp;quot; /&amp;gt;
        &amp;lt;/SSLHostConfig&amp;gt;
    &amp;lt;/Connector&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we can start the server:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;igorc@sl01:/opt$ sudo /usr/share/tomcat9/bin/startup.sh
Using CATALINA_BASE:   /usr/share/tomcat9
Using CATALINA_HOME:   /usr/share/tomcat9
Using CATALINA_TMPDIR: /usr/share/tomcat9/temp
Using JRE_HOME:        /usr
Using CLASSPATH:       /usr/share/tomcat9/bin/bootstrap.jar:/usr/share/tomcat9/bin/tomcat-juli.jar
Tomcat started.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and check for the features we need in the log file:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;igorc@sl01:/opt$ sudo grep -E &amp;quot;AprLifecycleListener|h2&amp;quot; /var/log/tomcat9/catalina.out
02-Apr-2016 20:29:05.875 INFO [main] org.apache.catalina.core.AprLifecycleListener.lifecycleEvent Loaded APR based Apache Tomcat Native library 1.2.5 using APR version 1.5.1.
02-Apr-2016 20:29:05.875 INFO [main] org.apache.catalina.core.AprLifecycleListener.lifecycleEvent APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].
02-Apr-2016 20:29:05.881 INFO [main] org.apache.catalina.core.AprLifecycleListener.initializeSSL OpenSSL successfully initialized (OpenSSL 1.0.2g  1 Mar 2016)
02-Apr-2016 20:29:05.883 INFO [main] org.apache.coyote.http11.AbstractHttp11Protocol.configureUpgradeProtocol The [&amp;quot;https-apr-8443&amp;quot;] connector has been configured to support negotiation to [h2] via ALPN
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can see the APR connector, the correct OpenSSL version and the h2 protocol available via ALPN (Application-Layer Protocol Negotiation).&lt;/p&gt;

&lt;h2&gt;Testing&lt;/h2&gt;

&lt;h3&gt;CuRL&lt;/h3&gt;

&lt;p&gt;To test the server I used the trusted curl. It came up it was little bit painful to set it up due to lot of prerequisites but since I&amp;#39;ve done it I might show it here as well. There are some other HTTP/2 testing tools available that you can use in case you have domain name registered with proper DNS resolution setup.&lt;/p&gt;

&lt;p&gt;First the SPDY (Google extension which is now becoming obsolete with http2) support:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;igorc@sl01:~$ git clone https://github.com/tatsuhiro-t/spdylay.git
igorc@sl01:~$ cd spdylay/
igorc@sl01:~$ autoreconf -i
igorc@sl01:~$ automake
igorc@sl01:~$ autoconf
igorc@sl01:~$ ./configure
igorc@sl01:~$ make -I/opt/openssl/include/
igorc@sl01:~$ sudo make install
igorc@sl01:~$ locate libspdylay.so.7
/opt/spdylay/lib/.libs/libspdylay.so.7
/opt/spdylay/lib/.libs/libspdylay.so.7.2.0
/usr/local/lib/libspdylay.so.7
/usr/local/lib/libspdylay.so.7.2.0
igorc@sl01:~$ sudo ln -s /usr/local/lib/libspdylay.so.7 /lib/x86_64-linux-gnu/libspdylay.so.7
igorc@sl01:~$ sudo ln -s /usr/local/lib/libspdylay.so.7.2.0 /lib/x86_64-linux-gnu/libspdylay.so.7.2.0
igorc@sl01:~$ sudo ldconfig
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next is nghhtp2:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;igorc@sl01:~$ git clone https://github.com/nghttp2/nghttp2.git
igorc@sl01:~$ cd nghttp2
igorc@sl01:~$ autoreconf -i
igorc@sl01:~$ automake
igorc@sl01:~$ autoconf
igorc@sl01:~$ OPENSSL_CFLAGS=&amp;quot;-I/opt/openssl/include&amp;quot; OPENSSL_LIBS=&amp;quot;-L/opt/openssl/lib -lssl -lcrypto -ldl&amp;quot; ./configure PYTHON=/usr/bin/python3
igorc@sl01:~$ make
igorc@sl01:~$ sudo make install
igorc@sl01:~$ sudo updatedb
igorc@sl01:~$ locate libnghttp2.so.14
/opt/nghttp2/lib/.libs/libnghttp2.so.14
/opt/nghttp2/lib/.libs/libnghttp2.so.14.6.0
/opt/nghttp2-1.9.1/lib/.libs/libnghttp2.so.14
/opt/nghttp2-1.9.1/lib/.libs/libnghttp2.so.14.6.0
/usr/local/lib/libnghttp2.so.14
/usr/local/lib/libnghttp2.so.14.6.0
igorc@sl01:~$ sudo ln -s /usr/local/lib/libnghttp2.so.14 /lib/x86_64-linux-gnu/libnghttp2.so.14
igorc@sl01:~$ sudo ln -s /usr/local/lib/libnghttp2.so.14.0.2 /lib/x86_64-linux-gnu/libnghttp2.so.14.0.2
igorc@sl01:~$ sudo ldconfig
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally checking the versions installed:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;igorc@sl01:~$ nghttp --version
nghttp nghttp2/1.10.0-DEV
igorc@sl01:~$ nghttpx --version
nghttpx nghttp2/1.10.0-DEV
igorc@sl01:~$ nghttpd --version
nghttpd nghttp2/1.10.0-DEV
igorc@sl01:~$ h2load --version
h2load nghttp2/1.10.0-DEV

We can use this tool as SSL proxy if needed (nothing to do with the test, just mentioning):
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;$ sudo nghttpx \
    --frontend=*,443 \
    --backend=localhost,8080 \
    --private-key-file=/path/to/key.key \
    --certificate-file=/path/to/cert.crt
```&lt;/p&gt;

&lt;p&gt;Or turn it into service:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ sudo cp ~/nghttp2/contrib/nghttpx-init /etc/init.d/nghttpx
$ sudo service nghttpx restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And finally CuRL:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;igorc@sl01:~$ wget https://curl.haxx.se/download/curl-7.48.0.tar.gz
igorc@sl01:~$ tar -xzf curl-7.48.0.tar.gz
igorc@sl01:~$ cd curl-7.48.0/
igorc@sl01:~$ PKG_CONFIG_LIBDIR=/opt/openssl/lib/pkgconfig/ ./configure --with-ssl=/opt/openssl --with-nghttp2=/usr/local
igorc@sl01:~$ make &amp;amp;&amp;amp; sudo make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we set the correct binary and library paths so curl can find them:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;igorc@sl01:~$ export PATH=/opt/openssl/bin:/usr/local/bin:igorc@sl01:~$PATH
igorc@sl01:~$ export LD_LIBRARY_PATH=/opt/openssl/lib:igorc@sl01:~$LD_LIBRARY_PATH
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Check the openssl and curl binaries and their features:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;igorc@sl01:~$ openssl version
OpenSSL 1.0.2g  1 Mar 2016

igorc@sl01:~$ curl --version
curl 7.48.0 (x86_64-pc-linux-gnu) libcurl/7.48.0 OpenSSL/1.0.2g zlib/1.2.8 nghttp2/1.10.0-DEV
Protocols: dict file ftp ftps gopher http https imap imaps pop3 pop3s rtsp smb smbs smtp smtps telnet tftp
Features: IPv6 Largefile NTLM NTLM_WB SSL libz TLS-SRP HTTP2 UnixSockets
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From the above output we can confirm that curl has http2 support.&lt;/p&gt;

&lt;p&gt;With all this done we can run the test. I tested for both when we have only ECDSA/ECC certificate configured in tomcat, since I wanted to see this cert in action:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;igorc@sl01:~$ curl --http2 -v -k -s -S -I https://localhost:8443/ -o /dev/null
*   Trying 127.0.0.1...
* Connected to localhost (127.0.0.1) port 8443 (#0)
* ALPN, offering h2
* ALPN, offering http/1.1
* Cipher selection: ALL:!EXPORT:!EXPORT40:!EXPORT56:!aNULL:!LOW:!RC4:@STRENGTH
* successfully set certificate verify locations:
*   CAfile: /etc/ssl/certs/ca-certificates.crt
  CApath: none
* TLSv1.2 (OUT), TLS header, Certificate Status (22):
} [5 bytes data]
* TLSv1.2 (OUT), TLS handshake, Client hello (1):
} [512 bytes data]
* TLSv1.2 (IN), TLS handshake, Server hello (2):
{ [75 bytes data]
* TLSv1.2 (IN), TLS handshake, Certificate (11):
{ [710 bytes data]
* TLSv1.2 (IN), TLS handshake, Server key exchange (12):
{ [181 bytes data]
* TLSv1.2 (IN), TLS handshake, Server finished (14):
{ [4 bytes data]
* TLSv1.2 (OUT), TLS handshake, Client key exchange (16):
} [70 bytes data]
* TLSv1.2 (OUT), TLS change cipher, Client hello (1):
} [1 bytes data]
* TLSv1.2 (OUT), TLS handshake, Finished (20):
} [16 bytes data]
* TLSv1.2 (IN), TLS change cipher, Client hello (1):
{ [1 bytes data]
* TLSv1.2 (IN), TLS handshake, Finished (20):
{ [16 bytes data]
* SSL connection using TLSv1.2 / ECDHE-ECDSA-AES256-GCM-SHA384
* ALPN, server accepted to use h2
* Server certificate:
*  subject: C=AU; ST=New South Wales; L=Sydney; O=My Corporation Ltd.; OU=DevOps; CN=tomcat9.mydomain.com
*  start date: Apr  4 02:41:03 2016 GMT
*  expire date: Dec 21 02:41:03 2035 GMT
*  issuer: C=AU; ST=New South Wales; L=Sydney; O=My Corporation Ltd.; OU=DevOps; CN=tomcat9.mydomain.com
*  SSL certificate verify result: self signed certificate (18), continuing anyway.
* Using HTTP2, server supports multi-use
* Connection state changed (HTTP/2 confirmed)
* TCP_NODELAY set
* Copying HTTP/2 data in stream buffer to connection buffer after upgrade: len=0
} [5 bytes data]
* Using Stream ID: 1 (easy handle 0x22dc050)
} [5 bytes data]
&amp;gt; HEAD / HTTP/1.1
&amp;gt; Host: localhost:8443
&amp;gt; User-Agent: curl/7.48.0
&amp;gt; Accept: */*
&amp;gt;
{ [5 bytes data]
* Connection state changed (MAX_CONCURRENT_STREAMS updated)!
} [5 bytes data]
&amp;lt; HTTP/2.0 200
&amp;lt; content-type:text/html;charset=UTF-8
&amp;lt; date:Mon, 04 Apr 2016 02:45:38 GMT
&amp;lt;
* Connection #0 to host localhost left intact
igorc@sl01:~$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and when both cert types are configured as per our example above:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;igorc@sl01:~$ curl --http2 -v -k -s -S -I https://localhost:8443/ -o /dev/null
*   Trying 127.0.0.1...
* Connected to localhost (127.0.0.1) port 8443 (#0)
* ALPN, offering h2
* ALPN, offering http/1.1
* Cipher selection: ALL:!EXPORT:!EXPORT40:!EXPORT56:!aNULL:!LOW:!RC4:@STRENGTH
* successfully set certificate verify locations:
*   CAfile: /etc/ssl/certs/ca-certificates.crt
  CApath: none
* TLSv1.2 (OUT), TLS header, Certificate Status (22):
} [5 bytes data]
* TLSv1.2 (OUT), TLS handshake, Client hello (1):
} [512 bytes data]
* TLSv1.2 (IN), TLS handshake, Server hello (2):
{ [75 bytes data]
* TLSv1.2 (IN), TLS handshake, Certificate (11):
{ [958 bytes data]
* TLSv1.2 (IN), TLS handshake, Server key exchange (12):
{ [333 bytes data]
* TLSv1.2 (IN), TLS handshake, Server finished (14):
{ [4 bytes data]
* TLSv1.2 (OUT), TLS handshake, Client key exchange (16):
} [70 bytes data]
* TLSv1.2 (OUT), TLS change cipher, Client hello (1):
} [1 bytes data]
* TLSv1.2 (OUT), TLS handshake, Finished (20):
} [16 bytes data]
* TLSv1.2 (IN), TLS change cipher, Client hello (1):
{ [1 bytes data]
* TLSv1.2 (IN), TLS handshake, Finished (20):
{ [16 bytes data]
* SSL connection using TLSv1.2 / ECDHE-RSA-AES256-GCM-SHA384
* ALPN, server accepted to use h2
* Server certificate:
*  subject: C=AU; ST=New South Wales; L=Sydney; O=My Corporation Ltd.; OU=DevOps; CN=tomcat9.mydomain.com
*  start date: Apr  4 02:07:04 2016 GMT
*  expire date: Dec 21 02:07:04 2035 GMT
*  issuer: C=AU; ST=New South Wales; L=Sydney; O=My Corporation Ltd.; OU=DevOps; CN=tomcat9.mydomain.com
*  SSL certificate verify result: self signed certificate (18), continuing anyway.
* Using HTTP2, server supports multi-use
* Connection state changed (HTTP/2 confirmed)
* TCP_NODELAY set
* Copying HTTP/2 data in stream buffer to connection buffer after upgrade: len=0
} [5 bytes data]
* Using Stream ID: 1 (easy handle 0x1387050)
} [5 bytes data]
&amp;gt; HEAD / HTTP/1.1
&amp;gt; Host: localhost:8443
&amp;gt; User-Agent: curl/7.48.0
&amp;gt; Accept: */*
&amp;gt;
{ [5 bytes data]
* Connection state changed (MAX_CONCURRENT_STREAMS updated)!
} [5 bytes data]
&amp;lt; HTTP/2.0 200
&amp;lt; content-type:text/html;charset=UTF-8
&amp;lt; date:Mon, 04 Apr 2016 02:21:07 GMT
&amp;lt;
* Connection #0 to host localhost left intact
igorc@sl01:~$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;in which case the server sends the RSA type (notice the different start and expire dates). In both cases we can see HTTP/2 connection being established.&lt;/p&gt;

&lt;h2&gt;External_resources:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://tomcat.apache.org/tomcat-9.0-doc/index.html&quot;&gt;Tomcat9 documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/channel/UCpqpJ0-G1lYfUBQ6_36Au_g&quot;&gt;Tomcat Youtube channel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jfclere/h2_demos&quot;&gt;Tomcat HTTP/2 demo app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/http2/http2-spec/wiki/Implementations&quot;&gt;HTTP/2 implementation tracking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/fstab/h2c&quot;&gt;H2C simple HTTP/2 command line test tool&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Igor Cicimov</name><email>igorc@encompasscorporation.com</email></author><summary>Tomcat9 brings bunch of new features of which support for HTTP/2 and multiple certificates per Virtual Host via SNI extension are most important ones. This needs Java 1.8, the latest APR/TC (Tomcat Native) release 1.2.x, since SNI support in current Java 1.8 is useless, which in turn requires OpenSSL version 1.0.2g installed. Early users of HTTP/2, according to one of the main Tomcat developers Mark Thomas, reported improvement of up to 20% in page speed due to its benefits like multiplexing, header compression and server push (servlet 4.0 API needed). By default HTTP/2 (h2) protocol is SSL, as expected the whole internet to be over https only in near future, but there is a clear-text version as well called h2c.</summary></entry><entry><title>ActiveMQ Master/Slave KahaDB on OCFS2 shared file system</title><link href="http://icicimov.github.io/ActiveMQ-Master-Slave-KahaDB-on-OCFS2-shared-file-system/" rel="alternate" type="text/html" title="ActiveMQ Master/Slave KahaDB on OCFS2 shared file system" /><published>2016-03-18T00:00:00+11:00</published><updated>2016-03-18T00:00:00+11:00</updated><id>http://icicimov.github.io/ActiveMQ-Master-Slave-KahaDB-on-OCFS2-shared-file-system</id><content type="html" xml:base="http://icicimov.github.io/ActiveMQ-Master-Slave-KahaDB-on-OCFS2-shared-file-system/">&lt;p&gt;During my tests of shared storage clusters I wondered if ActiveMQ supports file locking on OCFS2 file system which I used on couple of occasions. While looking into it I came accross the following warning on the &lt;a href=&quot;http://activemq.apache.org/shared-file-system-master-slave.html&quot;&gt;Apache project site&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;OCFS2 Warning&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Was testing using OCFS2 and both brokers thought they had the master lock - this is because OCFS2 only supports locking with &lt;code&gt;fcntl&lt;/code&gt; and not &lt;code&gt;lockf and flock&lt;/code&gt;, therefore mutex file locking from Java isn&amp;#39;t supported.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;From &lt;a href=&quot;http://sources.redhat.com/cluster/faq.html#gfs_vs_ocfs2&quot;&gt;RedHat faq&lt;/a&gt; :&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;OCFS2: No cluster-aware flock or POSIX locks&lt;/p&gt;

&lt;p&gt;GFS: fully supports Cluster-wide flocks and POSIX locks and is supported.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;See this JIRA for more discussion: &lt;a href=&quot;https://issues.apache.org/jira/browse/AMQ-4378&quot;&gt;AMQ-4378&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And true enough, when tested ActiveMQ-5.11.1 on one of the OCFS2 clusters, what happened is that both servers started as master due to lack of lock file on the share. Investigating further it came up that some good man created a patch that Apache never bothered to apply from some unknown reason. The case link &lt;a href=&quot;https://issues.apache.org/jira/browse/AMQ-4694&quot;&gt;AMQ-4694&lt;/a&gt;. The patch was attached to the ticket so thought I would try it and apply to latest 5.11.4 version.&lt;/p&gt;

&lt;p&gt;Downloaded the source:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;root@drbd01:~# aptitude install zip
root@drbd01:~# wget http://mirror.ventraip.net.au/apache/activemq/5.11.4/activemq-parent-5.11.4-source-release.zip
root@drbd01:~# unzip activemq-parent-5.11.4-source-release.zip
root@drbd01:~# cd activemq-parent-5.11.4/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and applied the patch:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;root@drbd01:~/activemq-parent-5.11.4# vi ocfs2-locks.patch
root@drbd01:~/activemq-parent-5.11.4# patch -p0 -i ocfs2-locks.patch
patching file NOTICE
Hunk #1 succeeded at 45 with fuzz 2 (offset -4 lines).
patching file activemq-broker/pom.xml
patching file activemq-broker/src/main/java/org/apache/activemq/store/AbstractResourceLocker.java
patching file activemq-broker/src/main/java/org/apache/activemq/store/SharedFileLocker.java
Hunk #1 FAILED at 16.
1 out of 1 hunk FAILED -- saving rejects to file activemq-broker/src/main/java/org/apache/activemq/store/SharedFileLocker.java.rej
patching file activemq-broker/src/main/java/org/apache/activemq/store/SharedNativeFileLocker.java
patching file activemq-broker/src/main/java/org/apache/activemq/util/LockFile.java
patching file activemq-broker/src/main/java/org/apache/activemq/util/LockResource.java
patching file activemq-broker/src/main/java/org/apache/activemq/util/NativeLockFile.java
patching file activemq-unit-tests/src/test/java/org/apache/activemq/util/NativeLockFileTest.java
patching file assembly/pom.xml
Hunk #1 succeeded at 342 (offset 14 lines).
patching file assembly/src/main/descriptors/common-bin.xml
Hunk #1 succeeded at 191 (offset -9 lines).
patching file pom.xml
Hunk #1 succeeded at 881 with fuzz 1 (offset 44 lines).
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ok, so all good except it failed for the SharedFileLocker.java file. Easily fixed by applying that part of the patch manually:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;root@drbd01:~/activemq-parent-5.11.4# vi activemq-broker/src/main/java/org/apache/activemq/store/SharedFileLocker.java
/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the &amp;quot;License&amp;quot;); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an &amp;quot;AS IS&amp;quot; BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.activemq.store;

import java.io.File;
import org.apache.activemq.util.LockFile;
import org.apache.activemq.util.LockResource;

/**
 * An {@link AbstractResourceLocker} that utilizes a {@link LockFile}.
 *
 * @org.apache.xbean.XBean element=&amp;quot;shared-file-locker&amp;quot;
 *
 */
public class SharedFileLocker extends AbstractResourceLocker {

    @Override
    protected LockResource newLockResource(File lockFileName) {
        return new LockFile(lockFileName, true);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next installed Maven:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;root@drbd01:~# wget http://apache.uberglobalmirror.com/maven/maven-3/3.3.9/binaries/apache-maven-3.3.9-bin.tar.gz
root@drbd01:~# tar -xzvf apache-maven-3.3.9-bin.tar.gz
root@drbd01:~# mv apache-maven-3.3.9 /usr/local/
root@drbd01:~# export PATH=/usr/local/apache-maven-3.3.9/bin:$PATH
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Back to AMQ directory and build the project:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;root@drbd01:~/activemq-parent-5.11.4# mvn -Dtest=false -DfailIfNoTests=false clean install -e -X
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Install the built binaries:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;root@drbd01:~# tar -xzvf /root/.m2/repository/org/apache/activemq/apache-activemq/5.11.4/apache-activemq-5.11.4-bin.tar.gz -C /opt/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and copy the setup from the previous AMQ version into the new one:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;root@drbd01:/opt# cp -a apache-activemq-5.11.1/conf/{log4j.properties,jmx.access,jmx.password,jetty.xml,encompass-activemq.xml,star_encompasshost_com.jks} apache-activemq-5.11.4/conf/
root@drbd01:/opt# chown -R activemq\: apache-activemq-5.11.4
root@drbd01:/opt# rm activemq
root@drbd01:/opt# ln -s apache-activemq-5.11.4 activemq
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The last bit is modifying the KahaDB locker to use the newly introduced shared-native-file-locker one:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;root@drbd01:/opt# vi activemq/conf/activemq.xml
[...]
    &amp;lt;persistenceAdapter&amp;gt;
        &amp;lt;kahaDB directory=&amp;quot;/share/activemq-data&amp;quot;
               indexCacheSize=&amp;quot;40000&amp;quot;
               checkForCorruptJournalFiles=&amp;quot;true&amp;quot;&amp;gt;
               &amp;lt;locker&amp;gt;
                  &amp;lt;shared-native-file-locker lockAcquireSleepInterval=&amp;quot;5000&amp;quot;/&amp;gt;
               &amp;lt;/locker&amp;gt;
         &amp;lt;/kahaDB&amp;gt;
    &amp;lt;/persistenceAdapter&amp;gt;
[...]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After copying over the binary tarball to the other server, installing and performing the above steps, I started the server and the lock file was indeed created this time:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;root@drbd01:/opt# ls -ltr /share/activemq-data/
total 160
drwxr-xr-x 3 activemq activemq     3896 Mar 17 15:27 com.broker.name
-rw-r--r-- 1 root     root            5 Mar 17 15:30 test
-rw-r--r-- 1 activemq activemq        0 Mar 17 18:16 lock
-rw-r--r-- 1 activemq activemq 33030144 Mar 17 18:17 db-1.log
-rw-r--r-- 1 activemq activemq    12304 Mar 17 18:17 db.redo
-rw-r--r-- 1 activemq activemq    12288 Mar 17 18:17 db.data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and the other server can see it:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;root@drbd02:/opt# start activemq &amp;amp;&amp;amp; tail -f /opt/activemq/data/activemq.log | grep -i lock
2016-03-18 10:00:15,375 | INFO  | Database /share/activemq-data/lock is locked... waiting 5 seconds for the database to be unlocked. Reason: java.io.IOException: failed to acquire lock: [11] ( | org.apache.activemq.store.SharedNativeFileLocker | main
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><summary>During my tests of shared storage clusters I wondered if ActiveMQ supports file locking on OCFS2 file system which I used on couple of occasions. While looking into it I came accross the following warning on the Apache project site:</summary></entry><entry><title>HAProxy dynamically adjust server weight using external agent</title><link href="http://icicimov.github.io/HAProxy-dynamically-adjust-server-weight-using-external-agent/" rel="alternate" type="text/html" title="HAProxy dynamically adjust server weight using external agent" /><published>2015-10-13T00:00:00+11:00</published><updated>2015-10-13T00:00:00+11:00</updated><id>http://icicimov.github.io/HAProxy-dynamically-adjust-server-weight-using-external-agent</id><content type="html" xml:base="http://icicimov.github.io/HAProxy-dynamically-adjust-server-weight-using-external-agent/">&lt;p&gt;Trying to utilize HAProxy-1.5/1.6 &lt;code&gt;agent-check&lt;/code&gt; feature, see &lt;a href=&quot;http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#5.2-agent-check&quot;&gt;HAProxy documentation&lt;/a&gt;, I wrote this small script to check Tomcat system load and return back some values that HAP can use to dynamically adjust the server weight in the backend.&lt;/p&gt;

&lt;p&gt;This will run as xinetd service on the Tomcats, for example made available to HAP on port 9707 (some randomly chosen free port).&lt;/p&gt;

&lt;p&gt;Explanation how is this going to work. Each server starts with weight of 100. This health check will run every 5 minutes lets say (the primary runs every 10 seconds) and the agent will return &amp;quot;up&amp;quot; plus weight value or &amp;quot;down&amp;quot; upon heath check. The weight percentage returned is calculated based on the system load in the last 5 minutes (can be 1 or 15 min. too), ie if load is below 90% it will return weight of 100, between 90% and 100% it will reduce the weight to 50% (meaning HAP will send only 25% of the connections to this server in case of 2 servers) and if 100% it will mark this server down.&lt;/p&gt;

&lt;p&gt;This additional, lets call it secondary, heath check will work in conjunction with the already existing one, which only checks if the service is up or down, and provide flexibility in terms of backend load.&lt;/p&gt;

&lt;h2&gt;Setup&lt;/h2&gt;

&lt;h3&gt;On the backends (Tomcat app servers)&lt;/h3&gt;

&lt;p&gt;Create agent-check script &lt;code&gt;/usr/local/bin/haproxy-agent-check&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;LMAX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;90

&lt;span class=&quot;nv&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;uptime &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; grep -E -o &lt;span class=&quot;s1&quot;&gt;&amp;#39;load average[s:][: ].*&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sed &lt;span class=&quot;s1&quot;&gt;&amp;#39;s/,//g&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; cut -d&lt;span class=&quot;s1&quot;&gt;&amp;#39; &amp;#39;&lt;/span&gt; -f3-5&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;cpus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;grep processor /proc/cpuinfo &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; wc -l&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;read&lt;/span&gt; -r l1 l5 l15&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;l5util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$l5/$cpus*100&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; bc -l &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; cut -d&lt;span class=&quot;s2&quot;&gt;&amp;quot;.&amp;quot;&lt;/span&gt; -f1&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$l5util&lt;/span&gt; -lt &lt;span class=&quot;nv&quot;&gt;$LMAX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;up 100%&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;0&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$l5util&lt;/span&gt; -gt &lt;span class=&quot;nv&quot;&gt;$LMAX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$l5util&lt;/span&gt; -lt &lt;span class=&quot;m&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;up 50%&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;0&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;down#CPU overload&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt; &amp;lt; &amp;lt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$load&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Set it to be executable:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;root@app21:~# chmod +x /usr/local/bin/haproxy-agent-check
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next we set it as xinetd service, first install xinetd:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;root@app21:~# aptitude install -y xinetd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then add our service to the system services in &lt;code&gt;/etc/services&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;...
haproxy-agent-check 9707/tcp                # haproxy-agent-check
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Create the xinetd daemon file &lt;code&gt;/etc/xinetd.d/haproxy-agent-check&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# default: on
# description: haproxy-agent-check
service haproxy-agent-check
{
        disable         = no
        flags           = REUSE
        socket_type     = stream
        port            = 9707
        wait            = no
        user            = nobody
        server          = /usr/local/bin/haproxy-agent-check
        log_on_failure  += USERID
        only_from       = 172.31.17.11 172.31.11.11 127.0.0.1
        per_source      = UNLIMITED
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To allow access from specific subnets instead of hosts we can use the following format:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;only_from       = 10.22.0.0 10.22.1.0 10.22.2.0 127.0.0.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Make it executable, restart xinetd and test:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;root@app21-hap:~# chmod +x /etc/xinetd.d/haproxy-agent-check
root@app21-:~# service xinetd restart
root@app21:~# telnet 127.0.0.1 9707
Trying 127.0.0.1...
Connected to 127.0.0.1.
Escape character is &amp;#39;^]&amp;#39;.
up 100%
Connection closed by foreign host.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All looks good so we can setup the HAP&amp;#39;s now.&lt;/p&gt;

&lt;h1&gt;On the HAProxy LB&amp;#39;s&lt;/h1&gt;

&lt;p&gt;Open the TCP port 9707 in the APP servers firewall and Test the agent-check connectivity from HAP serers to the app servers:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;root@lb1:~# telnet ip-172-31-17-41 9707
Trying 172.31.17.41...
Connected to ip-172-31-17-41.ap-southeast-2.compute.internal.
Escape character is &amp;#39;^]&amp;#39;.
up 100%
Connection closed by foreign host.

root@lb1:~# telnet ip-172-31-11-41 9707
Trying 172.31.11.41...
Connected to ip-172-31-11-41.ap-southeast-2.compute.internal.
Escape character is &amp;#39;^]&amp;#39;.
up 100%
Connection closed by foreign host.
root@lb1:~#
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add &lt;code&gt;agent-check&lt;/code&gt;, &lt;code&gt;agent-port&lt;/code&gt; and &lt;code&gt;agent-inter&lt;/code&gt; parameters to the backend servers in the &lt;code&gt;/etc/haproxy/haproxy.cfg&lt;/code&gt; config file:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;...
listen https-in
...
    default-server inter 10s downinter 5s rise 2 fall 2 slowstart 60s maxconn 200 maxqueue 250 weight 100 error-limit 10 on-error mark-down on-marked-down shutdown-sessions agent-port 9707 agent-inter 30s
    server ip-172-31-17-41  ip-172-31-17-41:8080  check agent-check observe layer7
    server ip-172-31-11-41  ip-172-31-11-41:8080  check agent-check observe layer7
    server localhost 127.0.0.1:8080 maxconn 500 backup weight 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And reload HAP service. Check the health status:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;root@lb1:~# echo &amp;quot;show stat&amp;quot; | socat stdio unix-connect:/run/haproxy/admin.sock | cut -d &amp;#39;,&amp;#39; -f1,2,18,19 | grep https
https-in,ip-172-31-17-41,UP,100
https-in,ip-172-31-11-41,UP,100
https-in,localhost,no check,1
https-in,BACKEND,UP,200
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can see the weight of both app servers is set to 100 atm but this should change if/when they come under high load for 5 minutes.&lt;/p&gt;</content><summary>Trying to utilize HAProxy-1.5/1.6 agent-check feature, see HAProxy documentation, I wrote this small script to check Tomcat system load and return back some values that HAP can use to dynamically adjust the server weight in the backend.</summary></entry><entry><title>HAProxy OCSP stapling</title><link href="http://icicimov.github.io/HAProxy-OCSP-stapling/" rel="alternate" type="text/html" title="HAProxy OCSP stapling" /><published>2015-03-30T00:00:00+11:00</published><updated>2015-03-30T00:00:00+11:00</updated><id>http://icicimov.github.io/HAProxy-OCSP-stapling</id><content type="html" xml:base="http://icicimov.github.io/HAProxy-OCSP-stapling/">&lt;p&gt;The &lt;strong&gt;Online Certificate Status Protocol (OCSP)&lt;/strong&gt; is an Internet protocol used for obtaining the revocation status of an X.509 digital certificate.  It is used by https clients (browsers) to confirm that the certificate sent by the server they have connected to is a valid one. Every time the client connects to a server it needs to contact the server&amp;#39;s CA OCSP responder and check the validity of its certificate. An OCSP responder (a server typically run by the certificate issuer) may return a signed response signifying that the certificate specified in the request is &amp;#39;good&amp;#39;, &amp;#39;revoked&amp;#39;, or &amp;#39;unknown&amp;#39;. If it cannot process the request, it may return an error code. It has several benefits over Certificate Revocation List (CRL) since an OCSP response contains less information and does not need to be parsed.&lt;/p&gt;

&lt;p&gt;OCSP stapling, formally known as the TLS Certificate Status Request extension, is an alternative approach to the OCSP for checking the revocation status of X.509 digital certificates. It allows the presenter (the server) of a certificate to bear the resource cost involved in providing OCSP responses by appending (&amp;quot;stapling&amp;quot;) a time-stamped OCSP response signed by the CA to the initial TLS Handshake, eliminating the need for clients to contact the CA.&lt;/p&gt;

&lt;h2&gt;Setting HAP for OCSP stapling&lt;/h2&gt;

&lt;p&gt;HAProxy implements OCSP stapling since version 1.5.6. By attaching the CA signed OCSP response to the initial SSL/TLS hand shake, the servers speed up the process of the establishing the SSL connection since the client does not need to contact the CRL or the OCSP responder of the CA does saving significant time. In our case, we need to contact the OCSP responder of our CA (Digicert), save the response in a file and tell HAP to use that file for stapling. The process can be described in two steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Obtain the signed response from the OCSP authority&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;root@server:/etc/haproxy# openssl ocsp -issuer DigiCertSecureServerCA.pem -cert star_mydomain_com.crt -url http://ocsp.digicert.com -header Host ocsp.digicert.com -no_nonce -noverify -respout star_mydomain_com.crt.ocsp
star_mydomain_com.crt: good
    This Update: Mar 29 12:05:00 2015 GMT
    Next Update: Apr  5 12:20:00 2015 GMT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Dynamically update HAP with this information&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;root@server:/etc/haproxy# echo &amp;quot;set ssl ocsp-response $(/usr/bin/base64 -w 10000 /etc/haproxy/star_mydomain_com.crt.ocsp)&amp;quot; | socat stdio unix-connect:/run/haproxy/admin.sock
OCSP Response updated!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We can automate the process with running the following script &lt;code&gt;/usr/local/bin/ocsp_update.sh&lt;/code&gt; as cronjob on daily basis:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Certificates path and names&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;DIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/etc/haproxy&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CERT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;star_mydomain_com.crt&amp;quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Get the issuer URI, download it&amp;#39;s certificate and convert into PEM format&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ISSUER_URI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;openssl x509 -in &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CERT&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; -text -noout &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; grep &lt;span class=&quot;s1&quot;&gt;&amp;#39;CA Issuers&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; cut -d: -f2,3&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ISSUER_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ISSUER_URI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;##*/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;read&lt;/span&gt; -r fname&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%.*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;done)&lt;/span&gt;
wget -q -O- &lt;span class=&quot;nv&quot;&gt;$ISSUER_URI&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; openssl x509 -inform DER -outform PEM -out &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ISSUER_NAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;.pem

&lt;span class=&quot;c&quot;&gt;# Get the OCSP URL from the certificate&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ocsp_url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;openssl x509 -noout -ocsp_uri -in &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CERT&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Extract the hostname from the OCSP URL&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ocsp_host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ocsp_url&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; cut -d/ -f3&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Create/update the ocsp response file and update HAProxy&lt;/span&gt;
openssl ocsp -noverify -no_nonce -issuer &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ISSUER_NAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;.pem -cert &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CERT&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; -url &lt;span class=&quot;nv&quot;&gt;$ocsp_url&lt;/span&gt; -header Host &lt;span class=&quot;nv&quot;&gt;$ocsp_host&lt;/span&gt; -respout &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CERT&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;.ocsp
&lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt; -eq &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;pidof haproxy&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; -s &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CERT&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;.ocsp &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;set ssl ocsp-response $(/usr/bin/base64 -w 10000 ${DIR}/${CERT}.ocsp)&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; socat stdio unix-connect:/run/haproxy/admin.sock

&lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The script, apart from the last line that updates the HAP, is pretty generic and can be used with any PEM type certificate with some other services like Apache, Nginx etc.&lt;/p&gt;

&lt;p&gt;To test the OCSP stapling:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;igorc@igor-laptop:~/Downloads$ echo quit | openssl s_client -connect server.mydomain.com:443 -status
CONNECTED(00000003)
depth=2 C = US, O = DigiCert Inc, OU = www.digicert.com, CN = DigiCert Global Root CA
verify error:num=19:self signed certificate in certificate chain
verify return:0
OCSP response:
======================================
OCSP Response Data:
    OCSP Response Status: successful (0x0)
    Response Type: Basic OCSP Response
    Version: 1 (0x0)
    Responder Id: 9071DB37EB73C8EFDCD51E12B634BA2B5AA0A692
    Produced At: Mar 29 12:05:00 2015 GMT
    Responses:
    Certificate ID:
      Hash Algorithm: sha1
      Issuer Name Hash: 20A6948B01BEE825A43A455576661F55C1920633
      Issuer Key Hash: 9071DB37EB73C8EFDCD51E12B634BA2B5AA0A692
      Serial Number: 064E51056C1688FFD0A9172758797C49
    Cert Status: good
    This Update: Mar 29 12:05:00 2015 GMT
    Next Update: Apr  5 12:20:00 2015 GMT

    Signature Algorithm: sha1WithRSAEncryption
         3c:9e:39:45:51:c5:55:61:78:26:cc:3e:3d:78:44:b7:37:53:
         f8:09:25:a1:80:8a:2f:39:ca:db:1e:94:d5:69:47:f6:c6:cc:
         c2:74:7b:fb:0c:75:67:49:a2:5d:17:69:68:5b:43:fa:d7:27:
         53:76:24:13:e9:7f:7e:5b:da:25:9e:a7:ee:10:56:33:2e:f0:
         d6:1b:13:a7:78:fd:96:23:51:5f:5b:9e:33:55:d1:73:c7:6a:
         cd:50:30:8f:40:8c:bc:0e:5f:e7:14:04:fc:cd:88:d1:5f:e6:
         34:2a:41:22:92:29:c6:cc:b8:bb:26:1d:ef:4b:c1:17:35:be:
         c9:f4:19:11:d6:b7:70:18:72:19:b8:ad:b3:f6:be:c6:95:cd:
         97:80:04:ce:12:2d:37:00:db:a3:f0:25:4e:e1:38:f4:90:29:
         2d:e5:4e:6c:e6:a6:d8:02:eb:be:59:f3:55:7c:cb:73:73:2c:
         f9:9a:42:3f:43:7e:ee:6a:52:2f:46:3e:72:ee:ee:78:10:97:
         fc:97:c3:87:f6:9d:15:4e:3b:13:cb:37:db:0f:d8:1f:58:6c:
         c3:1a:45:94:c5:d8:d1:3f:dd:f4:82:c3:e2:a0:51:95:7f:37:
         1b:d3:28:af:bc:23:05:13:53:fe:dc:42:ae:7b:92:ec:2d:e7:
         0b:4a:56:aa
======================================
---
Certificate chain
 0 s:/C=AU/ST=New South Wales/L=Sydney/O=My Corporation Pty Ltd/CN=*.mydomain.com
   i:/C=US/O=DigiCert Inc/CN=DigiCert Secure Server CA
 1 s:/C=US/O=DigiCert Inc/CN=DigiCert Secure Server CA
   i:/C=US/O=DigiCert Inc/OU=www.digicert.com/CN=DigiCert Global Root CA
 2 s:/C=US/O=DigiCert Inc/OU=www.digicert.com/CN=DigiCert Global Root CA
   i:/C=US/O=DigiCert Inc/OU=www.digicert.com/CN=DigiCert Global Root CA
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can see the server including the OCSP response in the TLS handshake.&lt;/p&gt;</content><author><name>Igor Cicimov</name><email>igorc@encompasscorporation.com</email></author><summary>The Online Certificate Status Protocol (OCSP) is an Internet protocol used for obtaining the revocation status of an X.509 digital certificate.  It is used by https clients (browsers) to confirm that the certificate sent by the server they have connected to is a valid one. Every time the client connects to a server it needs to contact the server&amp;#39;s CA OCSP responder and check the validity of its certificate. An OCSP responder (a server typically run by the certificate issuer) may return a signed response signifying that the certificate specified in the request is &amp;#39;good&amp;#39;, &amp;#39;revoked&amp;#39;, or &amp;#39;unknown&amp;#39;. If it cannot process the request, it may return an error code. It has several benefits over Certificate Revocation List (CRL) since an OCSP response contains less information and does not need to be parsed.</summary></entry><entry><title>Nginx LDAP module on Debian/Ubuntu</title><link href="http://icicimov.github.io/Nginx-LDAP-module/" rel="alternate" type="text/html" title="Nginx LDAP module on Debian/Ubuntu" /><published>2014-09-02T00:00:00+10:00</published><updated>2014-09-02T00:00:00+10:00</updated><id>http://icicimov.github.io/Nginx-LDAP-module</id><content type="html" xml:base="http://icicimov.github.io/Nginx-LDAP-module/">&lt;p&gt;&lt;a href=&quot;www.nginx.com&quot;&gt;Nginx&lt;/a&gt; by default contains the core modules needed which makes it light and lean web server. Any additional stuff needed have to be recompiled and added as modules since Nginx doesn&amp;#39;t have a dynamic (plug-able) module infrastructure like Apache for example.&lt;/p&gt;

&lt;h2&gt;Installation&lt;/h2&gt;

&lt;p&gt;First we need the OpenLDAP development headers so the module can build properly. On Ubuntu-12.04 (Precise) we run:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;root@server:~# aptitude install libldap2-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then we switch to our Nginx source directory we have created in this article Centralized logs collection with Logstash and clone the Nginx ldap module inside the modules directory from its project site on GitHub:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;root@server:~# cd /tmp/nginx-1.6.0
root@server:/tmp/nginx-1.6.0# cd debian/modules
root@server:/tmp/nginx-1.6.0/debian/modules# git clone https://github.com/kvspb/nginx-auth-ldap.git
Cloning into &amp;#39;nginx-auth-ldap&amp;#39;...
remote: Counting objects: 196, done.
remote: Total 196 (delta 0), reused 0 (delta 0)
Receiving objects: 100% (196/196), 77.58 KiB | 102.00 KiB/s, done.
Resolving deltas: 100% (101/101), done.
Checking connectivity... done.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then we edit the rules file and add the new module to the build command:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;root@server:/tmp/nginx-1.6.0/debian/modules# cd ../../
root@server:/tmp/nginx-1.6.0# vi debian/rules
...
naxsi_configure_flags := \
                        $(common_configure_flags) \
                        --without-mail_pop3_module \
                        --without-mail_smtp_module \
                        --without-mail_imap_module \
                        --without-http_uwsgi_module \
                        --without-http_scgi_module \
                        --add-module=$(MODULESDIR)/naxsi/naxsi_src \
                        --add-module=$(MODULESDIR)/nginx-cache-purge \
                        --add-module=$(MODULESDIR)/nginx-upstream-fair \
                        --add-module=$(MODULESDIR)/nginx-auth-ldap
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next we change the Nginx version in the changelog file:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;root@server:/tmp/nginx-1.6.0# vi debian/changelog
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;change the first line:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;nginx (1.6.0-1+precise0) precise; urgency=medium
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;nginx (1.6.0-1+precise0-ldap) precise; urgency=medium
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and start the building process:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;root@server:/tmp/nginx-1.6.0# dpkg-buildpackage -uc -b
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When finished we will see all the deb packages created in the directory one level above:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;root@server:~# ls -l /tmp/*.deb
-rw-r--r-- 1 root root   19818 Aug 27 19:14 /tmp/nginx_1.6.0-1+precise0-ldap_all.deb
-rw-r--r-- 1 root root   34086 Aug 27 19:14 /tmp/nginx-common_1.6.0-1+precise0-ldap_all.deb
-rw-r--r-- 1 root root   31756 Aug 27 19:14 /tmp/nginx-doc_1.6.0-1+precise0-ldap_all.deb
-rw-r--r-- 1 root root  643520 Aug 27 19:14 /tmp/nginx-extras_1.6.0-1+precise0-ldap_amd64.deb
-rw-r--r-- 1 root root 4839300 Aug 27 19:14 /tmp/nginx-extras-dbg_1.6.0-1+precise0-ldap_amd64.deb
-rw-r--r-- 1 root root  447082 Aug 27 19:14 /tmp/nginx-full_1.6.0-1+precise0-ldap_amd64.deb
-rw-r--r-- 1 root root 3152882 Aug 27 19:14 /tmp/nginx-full-dbg_1.6.0-1+precise0-ldap_amd64.deb
-rw-r--r-- 1 root root  363708 Aug 27 19:14 /tmp/nginx-light_1.6.0-1+precise0-ldap_amd64.deb
-rw-r--r-- 1 root root 2455638 Aug 27 19:14 /tmp/nginx-light-dbg_1.6.0-1+precise0-ldap_amd64.deb
-rw-r--r-- 1 root root  418852 Aug 27 19:14 /tmp/nginx-naxsi_1.6.0-1+precise0-ldap_amd64.deb
-rw-r--r-- 1 root root 2652770 Aug 27 19:14 /tmp/nginx-naxsi-dbg_1.6.0-1+precise0-ldap_amd64.deb
-rw-r--r-- 1 root root  308594 Aug 27 19:14 /tmp/nginx-naxsi-ui_1.6.0-1+precise0-ldap_all.deb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I install the nginx-naxsi packages only since that&amp;#39;s the Nginx version I&amp;#39;m are running:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;root@server:/tmp/nginx-1.6.0# dpkg -i nginx-common_1.6.0-1+precise0-ldap_all.deb nginx-naxsi_1.6.0-1+precise0-ldap_amd64.deb nginx-naxsi-dbg_1.6.0-1+precise0-ldap_amd64.deb nginx-naxsi-ui_1.6.0-1+precise0-ldap_all.deb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and restart Nginx process:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;root@server:/tmp/nginx-1.6.0# service nginx restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After that we can check the Nginx version information to confirm it compiled with LDAP support:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;root@server:/tmp/nginx-1.6.0# nginx -V
nginx version: nginx/1.6.0
TLS SNI support enabled
configure arguments: --with-cc-opt=&amp;#39;-g -O2 -fstack-protector --param=ssp-buffer-size=4 -Wformat -Wformat-security -Werror=format-security -D_FORTIFY_SOURCE=2&amp;#39; --with-ld-opt=&amp;#39;-Wl,-Bsymbolic-functions -Wl,-z,relro&amp;#39; --prefix=/usr/share/nginx --conf-path=/etc/nginx/nginx.conf --http-log-path=/var/log/nginx/access.log --error-log-path=/var/log/nginx/error.log --lock-path=/var/lock/nginx.lock --pid-path=/run/nginx.pid --http-client-body-temp-path=/var/lib/nginx/body --http-fastcgi-temp-path=/var/lib/nginx/fastcgi --http-proxy-temp-path=/var/lib/nginx/proxy --http-scgi-temp-path=/var/lib/nginx/scgi --http-uwsgi-temp-path=/var/lib/nginx/uwsgi --with-debug --with-pcre-jit --with-ipv6 --with-http_ssl_module --with-http_stub_status_module --with-http_realip_module --with-http_auth_request_module --without-mail_pop3_module --without-mail_smtp_module --without-mail_imap_module --without-http_uwsgi_module --without-http_scgi_module --add-module=/tmp/nginx-1.6.0/debian/modules/naxsi/naxsi_src --add-module=/tmp/nginx-1.6.0/debian/modules/nginx-cache-purge --add-module=/tmp/nginx-1.6.0/debian/modules/nginx-upstream-fair --add-module=/tmp/nginx-1.6.0/debian/modules/nginx-auth-ldap
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Configuration&lt;/h2&gt;

&lt;p&gt;We add to Nginx config file &lt;code&gt;/etc/nginx/nginx.conf&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;http {
  ...
  auth_ldap_cache_enabled on;
  auth_ldap_cache_expiration_time 10000;
  auth_ldap_cache_size 1000;

  ldap_server ldap1 {
    url ldap://ldap1.mydomain.com:389/ou=Users,dc=mydomain,dc=com?uid?sub;
    binddn &amp;quot;cn=binduser,ou=Users,dc=mydomain,dc=com&amp;quot;;
    binddn_passwd bindpassword;
    group_attribute memberUid;
    group_attribute_is_dn on;
    require group &amp;quot;cn=mygroup,ou=Groups,dc=mydomain,dc=com&amp;quot;;
    require valid_user;
  }

  ldap_server ldap2 {
    url ldap://ldap2.mydomain.com:389/ou=Users,dc=mydomain,dc=com?uid?sub;
    binddn &amp;quot;cn=binduser,ou=Users,dc=mydomain,dc=com&amp;quot;;
    binddn_passwd bindpassword;
    group_attribute memberUid;
    group_attribute_is_dn on;
    require group &amp;quot;cn=mygroup,ou=Groups,dc=mydomain,dc=com&amp;quot;;
    require valid_user;
  }
  ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then we use this in the virtual hosts or locations we want to protect like for example our server virtual host, in this case I have site &lt;code&gt;server&lt;/code&gt; active so I put in the &lt;code&gt;/etc/nginx/sites-enabled/server&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;server {
    listen              443 ssl;
    server_name         server.mydomain.com www.server.mydomain.com;
    root                /opt/server/webapp/content;
...   
    location / {
        include  /etc/nginx/mysite.rules;
        proxy_pass_header Server;
        proxy_set_header Host $http_host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Scheme $scheme;
        proxy_redirect off;
        proxy_connect_timeout 10;
        proxy_read_timeout 10;
        proxy_pass   http://127.0.0.1:8080;
        auth_ldap &amp;quot;My server access&amp;quot;;
        auth_ldap_servers ldap1;
        auth_ldap_servers ldap2;
    }
...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The only drawback is that the module still doesn&amp;#39;t support STARTTLS but supports SSL so in case we really need encrypted traffic (outside an internal LAN for example) we need to edit the config to use &lt;code&gt;ldaps&lt;/code&gt; on port &lt;code&gt;636&lt;/code&gt; (assuming our LDAP server has been configured with SSL support).&lt;/p&gt;</content><author><name>Igor Cicimov</name><email>igorc@encompasscorporation.com</email></author><category term="server" /><category term="nginx" /><category term="ldap" /><summary>Nginx by default contains the core modules needed which makes it light and lean web server. Any additional stuff needed have to be recompiled and added as modules since Nginx doesn&amp;#39;t have a dynamic (plug-able) module infrastructure like Apache for example.</summary></entry></feed>
